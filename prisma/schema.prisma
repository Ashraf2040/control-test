generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id           String           @id @default(uuid())
  email        String           @unique
  password     String
  name         String
  role         Role             @default(TEACHER)
  school       String?
  academicYear String
  subjects     SubjectTeacher[] // Link to SubjectTeacher join table for subjects
  classes      ClassTeacher[] // Link to ClassTeacher join table for classes
  reports      StudentReport[] // Relation to StudentReport model
}

model GlobalSettings {
  id         String    @id @default(uuid())
  targetDate DateTime?
}

model Class {
  id       String          @id @default(uuid())
  name     String
  reports  StudentReport[] // Relation to StudentReport model
  teachers ClassTeacher[] // Link to ClassTeacher join table for teachers
  students Student[] // Link to students in this class
  subjects ClassSubject[] // Link to ClassSubject join table for subjects
}

model Student {
  id          String          @id @default(uuid())
  name        String
  arabicName  String?
  classId     String
  class       Class           @relation(fields: [classId], references: [id])
  marks       Mark[] // Marks per subject/teacher combination
  nationality String? // Optional field for nationality
  dateOfBirth DateTime? // Optional field for date of birth
  iqamaNo     String? // Optional field for ID/Iqama Number
  passportNo  String?
  expenses    String          @default("paid")
  username    String?
  password    String?
  school      String?
  reports     StudentReport[] // Relation to StudentReport model
}

model Subject {
  id       String           @id @default(uuid())
  name     String
  teachers SubjectTeacher[] // Link to SubjectTeacher join table for teachers
  classes  ClassSubject[] // Link to ClassSubject join table for classes
  marks    Mark[] // Relation field for marks
  reports  StudentReport[]  @relation("subjectReports") // Relation to StudentReport
}

model ClassTeacher {
  id        String @id @default(uuid())
  classId   String
  teacherId String

  class   Class   @relation(fields: [classId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])
  marks   Mark[] // Link to marks for specific subjects under this teacher-class relationship

  @@unique([classId, teacherId])
}

model ClassSubject {
  id        String @id @default(uuid())
  classId   String
  subjectId String

  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([classId, subjectId])
}

model SubjectTeacher {
  id        String @id @default(uuid())
  subjectId String
  teacherId String

  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
}

model Mark {
  id            String @id @default(uuid())
  participation Int?
  behavior      Int?
  workingQuiz   Int?
  project       Int?
  finalExam     Int?
  totalMarks    Int?
  homework        Int? // Only for Arabic or Social Arabic
  classActivities Int? // Only for Arabic or Social Arabic
  memorizing      Int? // Only for Islamic subject
  reading         Int? // Only for Islamic subject
  oralTest        Int? // Only for Islamic subject

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  classTeacherId String
  classTeacher   ClassTeacher @relation(fields: [classTeacherId], references: [id])

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  academicYear String
  trimester    String

  @@unique([studentId, subjectId, classTeacherId, academicYear, trimester])
}

model StudentReport {
  id             String   @id @default(uuid())
  studentId      String
  student        Student  @relation(fields: [studentId], references: [id])

  classId        String
  class          Class    @relation(fields: [classId], references: [id])

  teacherId      String
  teacher        Teacher  @relation(fields: [teacherId], references: [id])

  subjectId      String
  subject        Subject  @relation(fields: [subjectId], references: [id], name: "subjectReports")

  academicYear   String
  trimester      String

  status         String   // New field for status
  recommendations String[] // New field for recommendations (array of strings)
  comment String @default("")  // New field for comment

  createdAt      DateTime @default(now()) // Timestamp when the report was created
  updatedAt      DateTime @updatedAt // Timestamp when the report was last updated

  @@unique([studentId, subjectId, teacherId, academicYear, trimester])
}


enum Role {
  ADMIN
  TEACHER
}
