generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id           String           @id @default(uuid())
  name         String
  email        String           @unique
  password     String
  role         Role             @default(TEACHER)
  academicYear String
  school       String?
  classes      ClassTeacher[]
  reports      StudentReport[]
  subjects     SubjectTeacher[]
   signature    String?
}

model GlobalSettings {
  id         String    @id @default(uuid())
  targetDate DateTime?
}

model Class {
  id       String          @id @default(uuid())
  name     String
  subjects ClassSubject[]
  teachers ClassTeacher[]
  students Student[]
  reports  StudentReport[]
}

model Student {
  id          String          @id @default(uuid())
  name        String
  classId     String
  dateOfBirth DateTime?
  iqamaNo     String?
  nationality String?
  passportNo  String?
  arabicName  String?
  expenses    String          @default("paid")
  password    String?
  username    String?
  school      String?
  marks       Mark[]
  class       Class           @relation(fields: [classId], references: [id])
  reports     StudentReport[]
}

model Subject {
  id       String           @id @default(uuid())
  name     String
  classes  ClassSubject[]
  marks    Mark[]
  reports  StudentReport[]  @relation("subjectReports")
  teachers SubjectTeacher[]
}

model ClassTeacher {
  id        String  @id @default(uuid())
  classId   String
  teacherId String
  class     Class   @relation(fields: [classId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  marks     Mark[]

  @@unique([classId, teacherId])
}

model ClassSubject {
  id        String  @id @default(uuid())
  classId   String
  subjectId String
  class     Class   @relation(fields: [classId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@unique([classId, subjectId])
}

model SubjectTeacher {
  id        String  @id @default(uuid())
  subjectId String
  teacherId String
  subject   Subject @relation(fields: [subjectId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
}

model Mark {
  id              String       @id @default(uuid())
  participation   Int?
  behavior        Int?
  project         Int?
  totalMarks      Int?
  studentId       String
  classTeacherId  String
  subjectId       String
  finalExam       Int?
  workingQuiz     Int?
  classActivities Int?
  homework        Int?
  memorizing      Int?
  oralTest        Int?
  reading         Int?
  academicYear    String
  trimester       String
  classTeacher    ClassTeacher @relation(fields: [classTeacherId], references: [id])
  student         Student      @relation(fields: [studentId], references: [id])
  subject         Subject      @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, classTeacherId, academicYear, trimester])
}

model StudentReport {
  id              String   @id @default(uuid())
  studentId       String
  classId         String
  teacherId       String
  subjectId       String
  academicYear    String
  trimester       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  comment         String   @default("")
    projectScore    Int?      // Add this line
  quizScore       Int?      // Add this line

  recommendations String[]
  status          String
  class           Class    @relation(fields: [classId], references: [id])
  student         Student  @relation(fields: [studentId], references: [id])
  subject         Subject  @relation("subjectReports", fields: [subjectId], references: [id])
  teacher         Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([studentId, subjectId, teacherId, academicYear, trimester])
}

enum Role {
  ADMIN
  TEACHER
}
